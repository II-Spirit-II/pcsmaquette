#!/bin/sh
#
# OCF agent for Docker Compose management - Filer1 resources
#
# License: GNU General Public License (GPL)
#

# Initialization
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Defaults
DOCKER_COMPOSE=/usr/bin/docker-compose
MAX_RETRIES=3

# Liste des projets à gérer par cet agent sur filer1
PROJECTS="dawanfr dawanorg dj-serverorg jehannorg"
BASE_PATH="/drbd"

# Fonction pour construire le chemin du docker-compose.yml pour un projet
get_compose_path() {
    local project_name=$1
    echo "${BASE_PATH}/${project_name}/docker/stack/${project_name}"
}

docker_usage() {
    cat <<END
        usage: $0 {start|stop|monitor|meta-data}
END
}

docker_meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="agent_docker_r1">
<version>1.2</version>
<longdesc lang="en">
Resource agent for managing specific Docker Compose projects (dawanfr, dawanorg, dj-serverorg, jehannorg) from /drbd on Filer1
</longdesc>
<shortdesc lang="en">Docker Compose RA for Filer1 (/drbd projects)</shortdesc>
<parameters>
</parameters>
<actions>
<action name="start"        timeout="180s" />
<action name="stop"         timeout="180s" />
<action name="monitor"      timeout="60s" interval="30s" depth="0" />
<action name="meta-data"    timeout="5s" />
</actions>
</resource-agent>
END
}

# Vérifie l'existence de tous les projets Compose
check_all_projects_exist() {
    local all_exist=true
    for project in $PROJECTS; do
        local compose_dir=$(get_compose_path "$project")
        if [ ! -d "$compose_dir" ] || [ ! -f "${compose_dir}/docker-compose.yml" ]; then
            ocf_log err "Docker Compose project '$project' not found at $compose_dir"
            all_exist=false
        fi
    done
    if [ "$all_exist" = "false" ]; then
        return 1
    fi
    return 0
}

# Démarre tous les projets Docker Compose
start_all_projects() {
    check_all_projects_exist || return 1
    
    local overall_success=0
    ocf_log info "Starting Docker Compose projects for filer1: $PROJECTS"
    
    for project in $PROJECTS; do
        local compose_dir=$(get_compose_path "$project")
        ocf_log info "Starting project '$project' at $compose_dir"
        cd "$compose_dir"
        $DOCKER_COMPOSE up -d
        
        if [ $? -ne 0 ]; then
            ocf_log err "Failed to start Docker Compose project '$project'"
            overall_success=1
        else
            ocf_log info "Docker Compose project '$project' successfully started"
        fi
    done
    
    return $overall_success
}

# Arrête tous les projets Docker Compose
stop_all_projects() {
    local overall_success=0
    ocf_log info "Stopping Docker Compose projects for filer1: $PROJECTS"
    
    for project in $PROJECTS; do
        local compose_dir=$(get_compose_path "$project")
        if [ -d "$compose_dir" ] && [ -f "${compose_dir}/docker-compose.yml" ]; then
            ocf_log info "Stopping project '$project' at $compose_dir"
            cd "$compose_dir"
            $DOCKER_COMPOSE down
            
            if [ $? -ne 0 ]; then
                ocf_log err "Failed to stop Docker Compose project '$project'"
                overall_success=1
            else
                ocf_log info "Docker Compose project '$project' successfully stopped"
            fi
        else
            ocf_log info "Docker Compose project '$project' not found at $compose_dir, nothing to stop"
        fi
    done
    
    return $overall_success
}

# Vérifie et répare un projet spécifique si nécessaire
check_and_repair_single_project() {
    local project_name=$1
    local compose_dir=$(get_compose_path "$project_name")
    local retry_count=0
    local project_ok=false
    
    ocf_log debug "Checking project '$project_name' at $compose_dir"
    
    if [ ! -d "$compose_dir" ] || [ ! -f "${compose_dir}/docker-compose.yml" ]; then
        ocf_log err "Project '$project_name' compose file/directory missing during check/repair."
        return 1
    fi

    while [ $retry_count -lt $MAX_RETRIES ] && [ "$project_ok" = "false" ]; do
        cd "$compose_dir"
        # Vérifier si tous les services du projet sont en cours d'exécution
        RUNNING_SERVICES=$($DOCKER_COMPOSE ps --services --filter "status=running" | wc -l)
        TOTAL_SERVICES=$($DOCKER_COMPOSE ps --services | wc -l)
        
        if [ $TOTAL_SERVICES -eq 0 ]; then
             ocf_log warn "Project '$project_name' has no services defined or found."
             project_ok=true
        elif [ $RUNNING_SERVICES -lt $TOTAL_SERVICES ]; then
            ocf_log warn "Some services for project '$project_name' are not running correctly ($RUNNING_SERVICES/$TOTAL_SERVICES)"
            ocf_log info "Attempting to repair project '$project_name' (attempt $((retry_count+1))/$MAX_RETRIES)"
            
            $DOCKER_COMPOSE up -d
            if [ $? -ne 0 ]; then
                ocf_log err "Repair command failed for project '$project_name'"
            fi
            retry_count=$((retry_count+1))
            sleep 5
        else
            ocf_log debug "Project '$project_name' is running correctly ($RUNNING_SERVICES/$TOTAL_SERVICES services)."
            project_ok=true
        fi
    done
    
    if [ "$project_ok" = "false" ]; then
        ocf_log err "Failed to repair project '$project_name' after $MAX_RETRIES attempts"
        return 1
    fi
    
    return 0
}

# Monitore tous les projets
monitor_all_projects() {
    local overall_status=0
    for project in $PROJECTS; do
        check_and_repair_single_project "$project"
        if [ $? -ne 0 ]; then
            ocf_log err "Project '$project' check/repair failed. Overall monitor status set to failed."
            overall_status=1
        fi
    done
    return $overall_status
}

docker_monitor() {
    if ! systemctl is-active docker >/dev/null 2>&1; then
        ocf_log err "Docker service is not running"
        return $OCF_ERR_GENERIC
    fi
    
    check_all_projects_exist
    if [ $? -ne 0 ]; then
         ocf_log warn "Not all required Docker Compose projects found. Resource considered not running."
         return $OCF_NOT_RUNNING
    fi
    
    ocf_log info "MONITOR: Checking Docker Compose projects for filer1: $PROJECTS"
    
    monitor_all_projects
    if [ $? -ne 0 ]; then
        ocf_log err "One or more Docker Compose projects are not running correctly after repair attempts."
        return $OCF_NOT_RUNNING
    fi
    
    ocf_log info "All monitored projects for filer1 are running correctly."
    return $OCF_SUCCESS
}

docker_start() {
    start_all_projects
    if [ $? -ne 0 ]; then
        ocf_log err "Failed to start one or more Docker Compose projects during initial start."
        return $OCF_ERR_GENERIC 
    fi
    
    sleep 10 

    monitor_all_projects
    if [ $? -ne 0 ]; then
        ocf_log err "One or more Docker Compose projects failed the post-start check/repair."
        return $OCF_ERR_GENERIC
    fi
    
    ocf_log info "All Docker Compose projects for filer1 started and verified successfully."
    return $OCF_SUCCESS
}

docker_stop() {
    stop_all_projects
    if [ $? -ne 0 ]; then
        ocf_log warn "Failed to cleanly stop one or more Docker Compose projects. Continuing..."
    fi
    
    ocf_log info "All Docker Compose projects for filer1 stop sequence initiated."
    return $OCF_SUCCESS
}

case $1 in
    meta-data)
        docker_meta_data
        exit $OCF_SUCCESS
        ;;
    start)
        docker_start
        exit $?
        ;;
    stop)
        docker_stop
        exit $?
        ;;
    monitor)
        docker_monitor
        exit $?
        ;;
    usage|help)
        docker_usage
        exit $OCF_SUCCESS
        ;;
    *)
        docker_usage
        exit $OCF_ERR_UNIMPLEMENTED
        ;;
esac 