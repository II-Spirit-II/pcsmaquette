#!/bin/sh
#
# OCF agent for Docker Compose management - Filer1 resources
#
# License: GNU General Public License (GPL)
#

# Initialization
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Defaults
DOCKER_COMPOSE=/usr/bin/docker-compose
MAX_RETRIES=3

# Chemin du répertoire Docker Compose pour r1
COMPOSE_PATH="/opt/compose/r1"

docker_usage() {
    cat <<END
        usage: $0 {start|stop|monitor|meta-data}
END
}

docker_meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="agent_docker_r1">
<version>1.0</version>
<longdesc lang="en">
Resource agent for managing Docker Compose projects on Filer1
</longdesc>
<shortdesc lang="en">Docker Compose RA for Filer1</shortdesc>
<parameters>
</parameters>
<actions>
<action name="start"        timeout="120s" />
<action name="stop"         timeout="120s" />
<action name="monitor"      timeout="30s" interval="30s" depth="0" />
<action name="meta-data"    timeout="5s" />
</actions>
</resource-agent>
END
}

# Vérifie l'existence du projet Compose
check_compose_exists() {
    if [ ! -d "$COMPOSE_PATH" ] || [ ! -f "${COMPOSE_PATH}/docker-compose.yml" ]; then
        ocf_log err "Docker Compose project not found at $COMPOSE_PATH"
        return 1
    fi
    return 0
}

# Démarre le projet Docker Compose
start_compose() {
    check_compose_exists || return 1
    
    ocf_log info "Starting Docker Compose project at $COMPOSE_PATH"
    cd "$COMPOSE_PATH"
    $DOCKER_COMPOSE up -d
    
    if [ $? -ne 0 ]; then
        ocf_log err "Failed to start Docker Compose project"
        return 1
    fi
    
    ocf_log info "Docker Compose project successfully started"
    return 0
}

# Arrête le projet Docker Compose
stop_compose() {
    if [ ! -d "$COMPOSE_PATH" ] || [ ! -f "${COMPOSE_PATH}/docker-compose.yml" ]; then
        ocf_log info "Docker Compose project not found at $COMPOSE_PATH, nothing to stop"
        return 0
    fi
    
    ocf_log info "Stopping Docker Compose project at $COMPOSE_PATH"
    cd "$COMPOSE_PATH"
    $DOCKER_COMPOSE down
    
    if [ $? -ne 0 ]; then
        ocf_log err "Failed to stop Docker Compose project"
        return 1
    fi
    
    ocf_log info "Docker Compose project successfully stopped"
    return 0
}

# Vérifie et répare le projet si nécessaire
check_and_repair_project() {
    local retry_count=0
    local project_ok=false
    
    while [ $retry_count -lt $MAX_RETRIES ] && [ "$project_ok" = "false" ]; do
        check_compose_exists || return 1
        
        cd "$COMPOSE_PATH"
        # Vérifier si tous les services sont en cours d'exécution
        RUNNING_SERVICES=$($DOCKER_COMPOSE ps --services --filter "status=running" | wc -l)
        TOTAL_SERVICES=$($DOCKER_COMPOSE ps --services | wc -l)
        
        if [ $RUNNING_SERVICES -lt $TOTAL_SERVICES ]; then
            ocf_log warn "Some Docker Compose services are not running correctly"
            ocf_log info "Attempting to repair services (attempt $((retry_count+1))/$MAX_RETRIES)"
            
            $DOCKER_COMPOSE up -d
            retry_count=$((retry_count+1))
            sleep 5
        else
            project_ok=true
        fi
    done
    
    if [ "$project_ok" = "false" ]; then
        ocf_log err "Failed to repair Docker Compose project after $MAX_RETRIES attempts"
        return 1
    fi
    
    return 0
}

docker_monitor() {
    if ! systemctl is-active docker >/dev/null 2>&1; then
        ocf_log err "Docker service is not running"
        return $OCF_ERR_GENERIC
    fi
    
    check_compose_exists || return $OCF_NOT_RUNNING
    
    ocf_log info "MONITOR: Checking Docker Compose project at $COMPOSE_PATH"
    
    check_and_repair_project
    if [ $? -ne 0 ]; then
        return $OCF_NOT_RUNNING
    fi
    
    return $OCF_SUCCESS
}

docker_start() {
    start_compose
    if [ $? -ne 0 ]; then
        return $OCF_ERR_GENERIC
    fi
    
    check_and_repair_project
    if [ $? -ne 0 ]; then
        return $OCF_ERR_GENERIC
    fi
    
    return $OCF_SUCCESS
}

docker_stop() {
    stop_compose
    if [ $? -ne 0 ]; then
        return $OCF_ERR_GENERIC
    fi
    
    return $OCF_SUCCESS
}

case $1 in
    meta-data)
        docker_meta_data
        exit $OCF_SUCCESS
        ;;
    start)
        docker_start
        ;;
    stop)
        docker_stop
        ;;
    monitor)
        docker_monitor
        ;;
    usage|help)
        docker_usage
        exit $OCF_SUCCESS
        ;;
    *)
        docker_usage
        exit $OCF_ERR_UNIMPLEMENTED
        ;;
esac 