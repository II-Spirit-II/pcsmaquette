#!/bin/sh
#
# OCF agent for Docker Compose management - Filer1 resources
#
# License: GNU General Public License (GPL)
#

# Initialization
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Defaults
DOCKER_COMPOSE=/usr/bin/docker-compose
COMPOSE_DB="/vagrant/shared/compose_r1.db"
MAX_RETRIES=3

# Liste des projets Compose gérés par cet agent (Filer1)
MANAGED_PROJECTS="dawan.fr dawan.org dj-server.org"
COMPOSE_PATH="/vagrant/compose/r1"

docker_usage() {
    cat <<END
        usage: $0 {start|stop|monitor|meta-data}
END
}

docker_meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="agent_docker_r1">
<version>1.0</version>
<longdesc lang="en">
Resource agent for managing Docker Compose projects on Filer1
</longdesc>
<shortdesc lang="en">Docker Compose RA for Filer1</shortdesc>
<parameters>
</parameters>
<actions>
<action name="start"        timeout="120s" />
<action name="stop"         timeout="120s" />
<action name="monitor"      timeout="30s" interval="30s" depth="0" />
<action name="meta-data"    timeout="5s" />
</actions>
</resource-agent>
END
}

# Enregistre les projets pour le failover
register_projects() {
    if [ ! -d "$(dirname $COMPOSE_DB)" ]; then
        mkdir -p "$(dirname $COMPOSE_DB)"
    fi
    
    # Vider la base existante
    > "${COMPOSE_DB}.new"
    
    if [ -d "$COMPOSE_PATH" ] && [ -f "${COMPOSE_PATH}/docker-compose.yml" ]; then
        echo "r1:${COMPOSE_PATH}" >> "${COMPOSE_DB}.new"
    fi
    
    if [ -f "${COMPOSE_DB}.new" ]; then
        mv "${COMPOSE_DB}.new" "${COMPOSE_DB}"
        chmod 666 "${COMPOSE_DB}"
        ocf_log info "Compose projects registered for failover: $(cat ${COMPOSE_DB} | wc -l) projects"
    else
        ocf_log info "No managed Compose projects found"
    fi
}

# Récupère et restaure les projets en cas de failover
restore_projects() {
    if [ ! -f "${COMPOSE_DB}" ]; then
        ocf_log info "No compose database found, nothing to restore"
        return 0
    fi
    
    ocf_log info "RESTORE: Compose DB content: $(cat ${COMPOSE_DB})"
    
    while IFS=':' read -r project_name project_path; do
        if [ -z "$project_name" ] || [ -z "$project_path" ]; then
            continue
        fi
        
        ocf_log info "RESTORE: Processing compose project: $project_name (path: $project_path)"
        
        if [ -d "$project_path" ] && [ -f "${project_path}/docker-compose.yml" ]; then
            ocf_log info "Starting compose project $project_name at $project_path"
            
            # Se déplacer dans le répertoire du projet et lancer docker-compose up
            cd "$project_path"
            $DOCKER_COMPOSE up -d
            
            if [ $? -ne 0 ]; then
                ocf_log err "Failed to start compose project $project_name"
            else
                ocf_log info "Compose project $project_name successfully started"
            fi
        else
            ocf_log err "Compose project directory $project_path not found or missing docker-compose.yml"
        fi
    done < "${COMPOSE_DB}"
}

# Vérifie l'état des projets et tente de les réparer si nécessaire
check_and_repair_projects() {
    local retry_count=0
    local projects_ok=false
    
    while [ $retry_count -lt $MAX_RETRIES ] && [ "$projects_ok" = "false" ]; do
        if [ -f "${COMPOSE_DB}" ] && [ -s "${COMPOSE_DB}" ]; then
            local missing_projects=false
            
            while IFS=':' read -r project_name project_path; do
                if [ -z "$project_name" ] || [ -z "$project_path" ]; then
                    continue
                fi
                
                if [ -d "$project_path" ]; then
                    cd "$project_path"
                    # Vérifier si tous les services sont en cours d'exécution
                    RUNNING_SERVICES=$($DOCKER_COMPOSE ps --services --filter "status=running" | wc -l)
                    TOTAL_SERVICES=$($DOCKER_COMPOSE ps --services | wc -l)
                    
                    if [ $RUNNING_SERVICES -lt $TOTAL_SERVICES ]; then
                        missing_projects=true
                        ocf_log warn "Compose project $project_name is registered but not all services are running"
                    fi
                else
                    missing_projects=true
                    ocf_log warn "Compose project directory $project_path not found"
                fi
            done < "${COMPOSE_DB}"
            
            if [ "$missing_projects" = "true" ]; then
                ocf_log info "Attempting to repair missing compose projects (attempt $((retry_count+1))/$MAX_RETRIES)"
                restore_projects
                retry_count=$((retry_count+1))
                sleep 5
            else
                projects_ok=true
            fi
        else
            projects_ok=true
        fi
    done
    
    if [ "$projects_ok" = "false" ]; then
        ocf_log err "Failed to repair compose projects after $MAX_RETRIES attempts"
        return 1
    fi
    
    return 0
}

docker_monitor() {
    if ! systemctl is-active docker >/dev/null 2>&1; then
        ocf_log err "Docker service is not running"
        return $OCF_ERR_GENERIC
    fi
    
    register_projects
    
    ocf_log info "MONITOR: Currently registered compose projects: $(cat ${COMPOSE_DB} 2>/dev/null | tr '\n' ' ')"
    
    check_and_repair_projects
    if [ $? -ne 0 ]; then
        return $OCF_NOT_RUNNING
    fi
    
    return $OCF_SUCCESS
}

docker_start() {
    restore_projects
    check_and_repair_projects
    if [ $? -ne 0 ]; then
        return $OCF_ERR_GENERIC
    fi
    return $OCF_SUCCESS
}

docker_stop() {
    register_projects
    
    if [ ! -f "${COMPOSE_DB}" ]; then
        ocf_log info "No compose projects to stop"
        return $OCF_SUCCESS
    fi
    
    while IFS=':' read -r project_name project_path; do
        if [ -z "$project_name" ] || [ -z "$project_path" ]; then
            continue
        fi
        
        if [ -d "$project_path" ] && [ -f "${project_path}/docker-compose.yml" ]; then
            ocf_log info "Stopping compose project $project_name"
            cd "$project_path"
            $DOCKER_COMPOSE down
            
            if [ $? -ne 0 ]; then
                ocf_log err "Failed to stop compose project $project_name"
            fi
        fi
    done < "${COMPOSE_DB}"
    
    return $OCF_SUCCESS
}

case $1 in
    meta-data)
        docker_meta_data
        exit $OCF_SUCCESS
        ;;
    start)
        docker_start
        ;;
    stop)
        docker_stop
        ;;
    monitor)
        docker_monitor
        ;;
    usage|help)
        docker_usage
        exit $OCF_SUCCESS
        ;;
    *)
        docker_usage
        exit $OCF_ERR_UNIMPLEMENTED
        ;;
esac 