#!/bin/sh

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Parameter defaults

OCF_RESKEY_state_default="${HA_RSCTMP}/agent_R2_failoverscript-${OCF_RESOURCE_INSTANCE}.state"
OCF_RESKEY_fake_default="agent_R2_failoverscript"
OCF_RESKEY_script_path_default="/root/pcs/r2_to_filer2.sh"

: ${OCF_RESKEY_state=${OCF_RESKEY_state_default}}
: ${OCF_RESKEY_fake=${OCF_RESKEY_fake_default}}
: ${OCF_RESKEY_script_path=${OCF_RESKEY_script_path_default}}

#######################################################################

meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="agent_R2_failoverscript">
<version>1.0</version>

<longdesc lang="en">
Script ran on Failover for R2
</longdesc>
<shortdesc lang="en">Script ran on Failover for R2</shortdesc>

<parameters>
<parameter name="state" unique="1">
<longdesc lang="en">
Location to store the resource state in.
</longdesc>
<shortdesc lang="en">State file</shortdesc>
<content type="string" default="${OCF_RESKEY_state_default}" />
</parameter>

<parameter name="fake" unique="0">
<longdesc lang="en">
Fake attribute that can be changed to cause a reload
</longdesc>
<shortdesc lang="en">Fake attribute that can be changed to cause a reload</shortdesc>
<content type="string" default="${OCF_RESKEY_fake_default}" />
</parameter>

<parameter name="script_path" unique="1">
<longdesc lang="en">
The path to the external script to be executed.
</longdesc>
<shortdesc lang="en">Script path</shortdesc>
<content type="string" default="${OCF_RESKEY_script_path_default}" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="20s" />
<action name="stop"         timeout="20s" />
<action name="monitor"      timeout="20s" interval="10s" depth="0" />
<action name="reload"       timeout="20s" />
<action name="migrate_to"   timeout="20s" />
<action name="migrate_from" timeout="20s" />
<action name="meta-data"    timeout="5s" />
<action name="validate-all"   timeout="20s" />
</actions>
</resource-agent>
END
}

#######################################################################

agent_R2_failoverscript_usage() {
    cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate-all|meta-data}
Expects to have a fully populated OCF RA-compliant environment set.
END
}

agent_R2_failoverscript_start() {
    agent_R2_failoverscript_monitor
    if [ $? =  $OCF_SUCCESS ]; then
        return $OCF_SUCCESS
    fi
    if [ -x "${OCF_RESKEY_script_path}" ]; then
        "${OCF_RESKEY_script_path}"
        if [ $? != 0 ]; then
            ocf_exit_reason "External script execution failed"
            return $OCF_ERR_GENERIC
        fi
    else
        ocf_exit_reason "External script not found or not executable"
        return $OCF_ERR_GENERIC
    fi
    touch ${OCF_RESKEY_state}
    return $OCF_SUCCESS
}

agent_R2_failoverscript_stop() {
    agent_R2_failoverscript_monitor
    if [ $? =  $OCF_SUCCESS ]; then
        rm ${OCF_RESKEY_state}
    fi
    return $OCF_SUCCESS
}

agent_R2_failoverscript_monitor() {
    /usr/bin/python3 /root/pcs/monitor_r2.py
    if [ $? -ne 0 ]; then
        ocf_exit_reason "L'IP failover n'est pas correctement configurée sur ce noeud."

        # Détermine sur quel noeud drbd_r2-clone est promue
        current_node=$(pcs status resources | grep -A 2 "Clone Set: drbd_r2-clone" | grep "Promoted:" | awk '{print $4}')

        # Sélectionne et exécute le script de failover approprié
        if [ "$current_node" = "57.128.73.105" ]; then
            script="/root/pcs/r2_to_filer2.sh"
        elif [ "$current_node" = "162.19.90.124" ]; then
            script="/root/pcs/r2_to_filer1.sh"
        else
            ocf_exit_reason "Impossible de déterminer le neoud actuel pour r2."
            return $OCF_ERR_GENERIC
        fi

        $script
        if [ $? -ne 0 ]; then
            ocf_exit_reason "La tentative de correction automatique a échoué."
            return $OCF_ERR_GENERIC
        fi
    fi
}

agent_R2_failoverscript_validate() {
    state_dir=`dirname "$OCF_RESKEY_state"`
    touch "$state_dir/$$"
    if [ $? != 0 ]; then
        ocf_exit_reason "State file \"$OCF_RESKEY_state\" is not writable"
        return $OCF_ERR_ARGS
    fi
    rm "$state_dir/$$"
    return $OCF_SUCCESS
}

case $__OCF_ACTION in
    start)          agent_R2_failoverscript_start;;
    stop)           agent_R2_failoverscript_stop;;
    monitor)        agent_R2_failoverscript_monitor;;
    reload)         ocf_log info "Reloading ${OCF_RESOURCE_INSTANCE} ...";;
    migrate_to)     ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} to ${OCF_RESKEY_CRM_meta_migrate_target}."
                    agent_R2_failoverscript_stop
                    ;;
    migrate_from)   ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} from ${OCF_RESKEY_CRM_meta_migrate_source}."
                    agent_R2_failoverscript_start
                    ;;
    validate-all)   agent_R2_failoverscript_validate;;
    meta-data)      meta_data
                    exit $OCF_SUCCESS
                    ;;
    usage|help)     agent_R2_failoverscript_usage
                    exit $OCF_SUCCESS
                    ;;
    *)              agent_R2_failoverscript_usage
                    exit $OCF_ERR_UNIMPLEMENTED
                    ;;
esac

rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
